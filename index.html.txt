<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>サイコロ記録アプリ</title>
  <link rel="manifest" href="manifest.json" />
  <link rel="icon" href="icon-192.png" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
  <script>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js');
      });
    }
  </script>
  <style>
    body { font-family: sans-serif; padding: 20px; margin: 0; background: #f4f4f4; }
    h1 { text-align: center; }
    .controls { text-align: center; margin-bottom: 20px; }
    button { font-size: 18px; padding: 10px 20px; margin: 5px; cursor: pointer; }
    .stats { text-align: center; margin-top: 20px; }
    table { margin: 0 auto; width: 90%; max-width: 500px; border-collapse: collapse; background: white; }
    th, td { padding: 10px; border: 1px solid #ddd; }
    canvas { display: block; margin: 20px auto; max-width: 90%; }
    @media (max-width: 600px) { button { width: 100%; margin: 10px 0; } }
  </style>
</head>
<body>
  <h1>🎲 サイコロ記録アプリ</h1>
  <div class="controls">
    <button onclick="rollDice()">サイコロを振る</button>
    <button onclick="rollMultipleDice(10)">10回連続で振る</button>
    <button onclick="resetData()">リセット</button>
  </div>
  <div class="stats" id="stats"></div>
  <canvas id="diceChart" width="400" height="200"></canvas>

  <script>
    const maxRolls = 1000000;
    let rollCount = 0;
    let results = [0, 0, 0, 0, 0, 0];
    const STORAGE_KEY = "diceAppData";

    const ctx = document.getElementById('diceChart').getContext('2d');
    const diceChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['1', '2', '3', '4', '5', '6'],
        datasets: [{
          label: '出現回数',
          data: results,
          backgroundColor: [
            'rgba(255, 99, 132, 0.6)', 'rgba(255, 159, 64, 0.6)',
            'rgba(255, 205, 86, 0.6)', 'rgba(75, 192, 192, 0.6)',
            'rgba(54, 162, 235, 0.6)', 'rgba(153, 102, 255, 0.6)'
          ],
          borderColor: 'rgba(0, 0, 0, 0.1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        plugins: {
          datalabels: {
            anchor: 'end', align: 'end', color: '#000',
            font: { weight: 'bold' }, formatter: Math.round
          }
        },
        scales: {
          y: { beginAtZero: true, ticks: { precision: 0 } }
        }
      },
      plugins: [ChartDataLabels]
    });

    function rollDice() {
      if (rollCount >= maxRolls) return alert("最大記録数（100万回）に達しました！");
      const roll = Math.floor(Math.random() * 6);
      results[roll]++; rollCount++;
      saveData(); updateStats();
    }

    function rollMultipleDice(times) {
      if (rollCount + times > maxRolls) {
        alert(`最大回数(${maxRolls})を超えます。残り: ${maxRolls - rollCount}`);
        return;
      }
      for (let i = 0; i < times; i++) {
        const roll = Math.floor(Math.random() * 6);
        results[roll]++; rollCount++;
      }
      saveData(); updateStats();
    }

    function resetData() {
      if (!confirm("本当にリセットしますか？")) return;
      results = [0, 0, 0, 0, 0, 0]; rollCount = 0;
      localStorage.removeItem(STORAGE_KEY);
      updateStats();
    }

    function updateStats() {
      let html = `<p>🎯 総回数: <strong>${rollCount}</strong></p>`;
      html += `<table><tr><th>目</th><th>回数</th><th>確率 (%)</th></tr>`;
      for (let i = 0; i < 6; i++) {
        const count = results[i];
        const percent = rollCount > 0 ? ((count / rollCount) * 100).toFixed(2) : "0.00";
        html += `<tr><td>${i + 1}</td><td>${count}</td><td>${percent}</td></tr>`;
      }
      html += '</table>';
      const sum = results.reduce((acc, val, idx) => acc + (val * (idx + 1)), 0);
      const average = rollCount > 0 ? (sum / rollCount).toFixed(2) : "0.00";
      html += `<p>📊 平均値: <strong>${average}</strong></p>`;
      document.getElementById('stats').innerHTML = html;
      diceChart.data.datasets[0].data = results;
      diceChart.update();
    }

    function saveData() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify({ results, rollCount }));
    }

    function loadData() {
      const dataStr = localStorage.getItem(STORAGE_KEY);
      if (dataStr) {
        try {
          const data = JSON.parse(dataStr);
          if (Array.isArray(data.results) && typeof data.rollCount === "number") {
            results = data.results; rollCount = data.rollCount;
          }
        } catch {
          console.warn("保存データの読み込みに失敗しました。");
        }
      }
    }

    loadData(); updateStats();
  </script>
</body>
</html>
